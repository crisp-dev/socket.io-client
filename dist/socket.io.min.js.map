{"version":3,"file":"socket.io.min.js","sources":["../node_modules/parseuri/index.js","../node_modules/engine.io-client/node_modules/engine.io-parser/build/esm/commons.js","../node_modules/@socket.io/base64-arraybuffer/dist/base64-arraybuffer.es5.js","../node_modules/engine.io-client/node_modules/engine.io-parser/build/esm/encodePacket.browser.js","../node_modules/engine.io-client/node_modules/engine.io-parser/build/esm/decodePacket.browser.js","../node_modules/@socket.io/component-emitter/index.js","../node_modules/engine.io-client/build/esm/globalThis.browser.js","../node_modules/engine.io-client/build/esm/util.js","../node_modules/engine.io-client/build/esm/transport.js","../node_modules/engine.io-client/build/esm/contrib/parseqs.js","../node_modules/engine.io-client/build/esm/contrib/yeast.js","../node_modules/engine.io-client/build/esm/transports/websocket-constructor.browser.js","../node_modules/engine.io-client/build/esm/transports/websocket.js","../node_modules/engine.io-client/build/esm/transports/index.js","../node_modules/engine.io-client/build/esm/contrib/parseuri.js","../node_modules/engine.io-client/build/esm/socket.js","../node_modules/engine.io-client/node_modules/engine.io-parser/build/esm/index.js","../build/esm/parser.js","../build/esm/on.js","../build/esm/socket.js","../node_modules/backo2/index.js","../build/esm/manager.js","../build/esm/index.js","../build/esm/url.js"],"sourcesContent":["/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\n\nvar re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\n\nvar parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\n\nmodule.exports = function parseuri(str) {\n    var src = str,\n        b = str.indexOf('['),\n        e = str.indexOf(']');\n\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n\n    var m = re.exec(str || ''),\n        uri = {},\n        i = 14;\n\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n\n    return uri;\n};\n\nfunction pathNames(obj, path) {\n    var regx = /\\/{2,9}/g,\n        names = path.replace(regx, \"/\").split(\"/\");\n\n    if (path.substr(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.substr(path.length - 1, 1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n\n    return names;\n}\n\nfunction queryKey(uri, query) {\n    var data = {};\n\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n\n    return data;\n}\n","const PACKET_TYPES = Object.create(null); // no Map = no polyfill\nPACKET_TYPES[\"open\"] = \"0\";\nPACKET_TYPES[\"close\"] = \"1\";\nPACKET_TYPES[\"ping\"] = \"2\";\nPACKET_TYPES[\"pong\"] = \"3\";\nPACKET_TYPES[\"message\"] = \"4\";\nPACKET_TYPES[\"upgrade\"] = \"5\";\nPACKET_TYPES[\"noop\"] = \"6\";\nconst PACKET_TYPES_REVERSE = Object.create(null);\nObject.keys(PACKET_TYPES).forEach(key => {\n    PACKET_TYPES_REVERSE[PACKET_TYPES[key]] = key;\n});\nconst ERROR_PACKET = { type: \"error\", data: \"parser error\" };\nexport { PACKET_TYPES, PACKET_TYPES_REVERSE, ERROR_PACKET };\n","/*\n * base64-arraybuffer 1.0.1 <https://github.com/niklasvh/base64-arraybuffer>\n * Copyright (c) 2022 Niklas von Hertzen <https://hertzen.com>\n * Released under MIT License\n */\nvar chars = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n// Use a lookup table to find the index.\nvar lookup = typeof Uint8Array === 'undefined' ? [] : new Uint8Array(256);\nfor (var i = 0; i < chars.length; i++) {\n    lookup[chars.charCodeAt(i)] = i;\n}\nvar encode = function (arraybuffer) {\n    var bytes = new Uint8Array(arraybuffer), i, len = bytes.length, base64 = '';\n    for (i = 0; i < len; i += 3) {\n        base64 += chars[bytes[i] >> 2];\n        base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n        base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n        base64 += chars[bytes[i + 2] & 63];\n    }\n    if (len % 3 === 2) {\n        base64 = base64.substring(0, base64.length - 1) + '=';\n    }\n    else if (len % 3 === 1) {\n        base64 = base64.substring(0, base64.length - 2) + '==';\n    }\n    return base64;\n};\nvar decode = function (base64) {\n    var bufferLength = base64.length * 0.75, len = base64.length, i, p = 0, encoded1, encoded2, encoded3, encoded4;\n    if (base64[base64.length - 1] === '=') {\n        bufferLength--;\n        if (base64[base64.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n    var arraybuffer = new ArrayBuffer(bufferLength), bytes = new Uint8Array(arraybuffer);\n    for (i = 0; i < len; i += 4) {\n        encoded1 = lookup[base64.charCodeAt(i)];\n        encoded2 = lookup[base64.charCodeAt(i + 1)];\n        encoded3 = lookup[base64.charCodeAt(i + 2)];\n        encoded4 = lookup[base64.charCodeAt(i + 3)];\n        bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);\n        bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);\n        bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);\n    }\n    return arraybuffer;\n};\n\nexport { decode, encode };\n//# sourceMappingURL=base64-arraybuffer.es5.js.map\n","import { PACKET_TYPES } from \"./commons.js\";\nconst withNativeBlob = typeof Blob === \"function\" ||\n    (typeof Blob !== \"undefined\" &&\n        Object.prototype.toString.call(Blob) === \"[object BlobConstructor]\");\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\n// ArrayBuffer.isView method is not defined in IE10\nconst isView = obj => {\n    return typeof ArrayBuffer.isView === \"function\"\n        ? ArrayBuffer.isView(obj)\n        : obj && obj.buffer instanceof ArrayBuffer;\n};\nconst encodePacket = ({ type, data }, supportsBinary, callback) => {\n    if (withNativeBlob && data instanceof Blob) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(data, callback);\n        }\n    }\n    else if (withNativeArrayBuffer &&\n        (data instanceof ArrayBuffer || isView(data))) {\n        if (supportsBinary) {\n            return callback(data);\n        }\n        else {\n            return encodeBlobAsBase64(new Blob([data]), callback);\n        }\n    }\n    // plain string\n    return callback(PACKET_TYPES[type] + (data || \"\"));\n};\nconst encodeBlobAsBase64 = (data, callback) => {\n    const fileReader = new FileReader();\n    fileReader.onload = function () {\n        const content = fileReader.result.split(\",\")[1];\n        callback(\"b\" + content);\n    };\n    return fileReader.readAsDataURL(data);\n};\nexport default encodePacket;\n","import { ERROR_PACKET, PACKET_TYPES_REVERSE } from \"./commons.js\";\nimport { decode } from \"@socket.io/base64-arraybuffer\";\nconst withNativeArrayBuffer = typeof ArrayBuffer === \"function\";\nconst decodePacket = (encodedPacket, binaryType) => {\n    if (typeof encodedPacket !== \"string\") {\n        return {\n            type: \"message\",\n            data: mapBinary(encodedPacket, binaryType)\n        };\n    }\n    const type = encodedPacket.charAt(0);\n    if (type === \"b\") {\n        return {\n            type: \"message\",\n            data: decodeBase64Packet(encodedPacket.substring(1), binaryType)\n        };\n    }\n    const packetType = PACKET_TYPES_REVERSE[type];\n    if (!packetType) {\n        return ERROR_PACKET;\n    }\n    return encodedPacket.length > 1\n        ? {\n            type: PACKET_TYPES_REVERSE[type],\n            data: encodedPacket.substring(1)\n        }\n        : {\n            type: PACKET_TYPES_REVERSE[type]\n        };\n};\nconst decodeBase64Packet = (data, binaryType) => {\n    if (withNativeArrayBuffer) {\n        const decoded = decode(data);\n        return mapBinary(decoded, binaryType);\n    }\n    else {\n        return { base64: true, data }; // fallback for old browsers\n    }\n};\nconst mapBinary = (data, binaryType) => {\n    switch (binaryType) {\n        case \"blob\":\n            return data instanceof ArrayBuffer ? new Blob([data]) : data;\n        case \"arraybuffer\":\n        default:\n            return data; // assuming the data is already an ArrayBuffer\n    }\n};\nexport default decodePacket;\n","\n/**\n * Expose `Emitter`.\n */\n\nexports.Emitter = Emitter;\n\n/**\n * Initialize a new `Emitter`.\n *\n * @api public\n */\n\nfunction Emitter(obj) {\n  if (obj) return mixin(obj);\n}\n\n/**\n * Mixin the emitter properties.\n *\n * @param {Object} obj\n * @return {Object}\n * @api private\n */\n\nfunction mixin(obj) {\n  for (var key in Emitter.prototype) {\n    obj[key] = Emitter.prototype[key];\n  }\n  return obj;\n}\n\n/**\n * Listen on the given `event` with `fn`.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.on =\nEmitter.prototype.addEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n  (this._callbacks['$' + event] = this._callbacks['$' + event] || [])\n    .push(fn);\n  return this;\n};\n\n/**\n * Adds an `event` listener that will be invoked a single\n * time then automatically removed.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.once = function(event, fn){\n  function on() {\n    this.off(event, on);\n    fn.apply(this, arguments);\n  }\n\n  on.fn = fn;\n  this.on(event, on);\n  return this;\n};\n\n/**\n * Remove the given callback for `event` or all\n * registered callbacks.\n *\n * @param {String} event\n * @param {Function} fn\n * @return {Emitter}\n * @api public\n */\n\nEmitter.prototype.off =\nEmitter.prototype.removeListener =\nEmitter.prototype.removeAllListeners =\nEmitter.prototype.removeEventListener = function(event, fn){\n  this._callbacks = this._callbacks || {};\n\n  // all\n  if (0 == arguments.length) {\n    this._callbacks = {};\n    return this;\n  }\n\n  // specific event\n  var callbacks = this._callbacks['$' + event];\n  if (!callbacks) return this;\n\n  // remove all handlers\n  if (1 == arguments.length) {\n    delete this._callbacks['$' + event];\n    return this;\n  }\n\n  // remove specific handler\n  var cb;\n  for (var i = 0; i < callbacks.length; i++) {\n    cb = callbacks[i];\n    if (cb === fn || cb.fn === fn) {\n      callbacks.splice(i, 1);\n      break;\n    }\n  }\n\n  // Remove event specific arrays for event types that no\n  // one is subscribed for to avoid memory leak.\n  if (callbacks.length === 0) {\n    delete this._callbacks['$' + event];\n  }\n\n  return this;\n};\n\n/**\n * Emit `event` with the given args.\n *\n * @param {String} event\n * @param {Mixed} ...\n * @return {Emitter}\n */\n\nEmitter.prototype.emit = function(event){\n  this._callbacks = this._callbacks || {};\n\n  var args = new Array(arguments.length - 1)\n    , callbacks = this._callbacks['$' + event];\n\n  for (var i = 1; i < arguments.length; i++) {\n    args[i - 1] = arguments[i];\n  }\n\n  if (callbacks) {\n    callbacks = callbacks.slice(0);\n    for (var i = 0, len = callbacks.length; i < len; ++i) {\n      callbacks[i].apply(this, args);\n    }\n  }\n\n  return this;\n};\n\n// alias used for reserved events (protected method)\nEmitter.prototype.emitReserved = Emitter.prototype.emit;\n\n/**\n * Return array of callbacks for `event`.\n *\n * @param {String} event\n * @return {Array}\n * @api public\n */\n\nEmitter.prototype.listeners = function(event){\n  this._callbacks = this._callbacks || {};\n  return this._callbacks['$' + event] || [];\n};\n\n/**\n * Check if this emitter has `event` handlers.\n *\n * @param {String} event\n * @return {Boolean}\n * @api public\n */\n\nEmitter.prototype.hasListeners = function(event){\n  return !! this.listeners(event).length;\n};\n","export default (() => {\n    if (typeof self !== \"undefined\") {\n        return self;\n    }\n    else if (typeof window !== \"undefined\") {\n        return window;\n    }\n    else {\n        return Function(\"return this\")();\n    }\n})();\n","import globalThis from \"./globalThis.js\";\nexport function pick(obj, ...attr) {\n    return attr.reduce((acc, k) => {\n        if (obj.hasOwnProperty(k)) {\n            acc[k] = obj[k];\n        }\n        return acc;\n    }, {});\n}\n// Keep a reference to the real timeout functions so they can be used when overridden\nconst NATIVE_SET_TIMEOUT = setTimeout;\nconst NATIVE_CLEAR_TIMEOUT = clearTimeout;\nexport function installTimerFunctions(obj, opts) {\n    if (opts.useNativeTimers) {\n        obj.setTimeoutFn = NATIVE_SET_TIMEOUT.bind(globalThis);\n        obj.clearTimeoutFn = NATIVE_CLEAR_TIMEOUT.bind(globalThis);\n    }\n    else {\n        obj.setTimeoutFn = setTimeout.bind(globalThis);\n        obj.clearTimeoutFn = clearTimeout.bind(globalThis);\n    }\n}\n// base64 encoded buffers are about 33% bigger (https://en.wikipedia.org/wiki/Base64)\nconst BASE64_OVERHEAD = 1.33;\n// we could also have used `new Blob([obj]).size`, but it isn't supported in IE9\nexport function byteLength(obj) {\n    if (typeof obj === \"string\") {\n        return utf8Length(obj);\n    }\n    // arraybuffer or blob\n    return Math.ceil((obj.byteLength || obj.size) * BASE64_OVERHEAD);\n}\nfunction utf8Length(str) {\n    let c = 0, length = 0;\n    for (let i = 0, l = str.length; i < l; i++) {\n        c = str.charCodeAt(i);\n        if (c < 0x80) {\n            length += 1;\n        }\n        else if (c < 0x800) {\n            length += 2;\n        }\n        else if (c < 0xd800 || c >= 0xe000) {\n            length += 3;\n        }\n        else {\n            i++;\n            length += 4;\n        }\n    }\n    return length;\n}\n","import { decodePacket } from \"engine.io-parser\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { installTimerFunctions } from \"./util.js\";\nclass TransportError extends Error {\n    constructor(reason, description, context) {\n        super(reason);\n        this.description = description;\n        this.context = context;\n        this.type = \"TransportError\";\n    }\n}\nexport class Transport extends Emitter {\n    /**\n     * Transport abstract constructor.\n     *\n     * @param {Object} options.\n     * @api private\n     */\n    constructor(opts) {\n        super();\n        this.writable = false;\n        installTimerFunctions(this, opts);\n        this.opts = opts;\n        this.query = opts.query;\n        this.readyState = \"\";\n        this.socket = opts.socket;\n    }\n    /**\n     * Emits an error.\n     *\n     * @param {String} reason\n     * @param description\n     * @param context - the error context\n     * @return {Transport} for chaining\n     * @api protected\n     */\n    onError(reason, description, context) {\n        super.emitReserved(\"error\", new TransportError(reason, description, context));\n        return this;\n    }\n    /**\n     * Opens the transport.\n     *\n     * @api public\n     */\n    open() {\n        if (\"closed\" === this.readyState || \"\" === this.readyState) {\n            this.readyState = \"opening\";\n            this.doOpen();\n        }\n        return this;\n    }\n    /**\n     * Closes the transport.\n     *\n     * @api public\n     */\n    close() {\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.doClose();\n            this.onClose();\n        }\n        return this;\n    }\n    /**\n     * Sends multiple packets.\n     *\n     * @param {Array} packets\n     * @api public\n     */\n    send(packets) {\n        if (\"open\" === this.readyState) {\n            this.write(packets);\n        }\n        else {\n            // this might happen if the transport was silently closed in the beforeunload event handler\n        }\n    }\n    /**\n     * Called upon open\n     *\n     * @api protected\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        this.writable = true;\n        super.emitReserved(\"open\");\n    }\n    /**\n     * Called with data.\n     *\n     * @param {String} data\n     * @api protected\n     */\n    onData(data) {\n        const packet = decodePacket(data, this.socket.binaryType);\n        this.onPacket(packet);\n    }\n    /**\n     * Called with a decoded packet.\n     *\n     * @api protected\n     */\n    onPacket(packet) {\n        super.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon close.\n     *\n     * @api protected\n     */\n    onClose(details) {\n        this.readyState = \"closed\";\n        super.emitReserved(\"close\", details);\n    }\n}\n","// imported from https://github.com/galkn/querystring\n/**\n * Compiles a querystring\n * Returns string representation of the object\n *\n * @param {Object}\n * @api private\n */\nexport function encode(obj) {\n    let str = '';\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            if (str.length)\n                str += '&';\n            str += encodeURIComponent(i) + '=' + encodeURIComponent(obj[i]);\n        }\n    }\n    return str;\n}\n/**\n * Parses a simple querystring into an object\n *\n * @param {String} qs\n * @api private\n */\nexport function decode(qs) {\n    let qry = {};\n    let pairs = qs.split('&');\n    for (let i = 0, l = pairs.length; i < l; i++) {\n        let pair = pairs[i].split('=');\n        qry[decodeURIComponent(pair[0])] = decodeURIComponent(pair[1]);\n    }\n    return qry;\n}\n","// imported from https://github.com/unshiftio/yeast\n'use strict';\nconst alphabet = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_'.split(''), length = 64, map = {};\nlet seed = 0, i = 0, prev;\n/**\n * Return a string representing the specified number.\n *\n * @param {Number} num The number to convert.\n * @returns {String} The string representation of the number.\n * @api public\n */\nexport function encode(num) {\n    let encoded = '';\n    do {\n        encoded = alphabet[num % length] + encoded;\n        num = Math.floor(num / length);\n    } while (num > 0);\n    return encoded;\n}\n/**\n * Return the integer value specified by the given string.\n *\n * @param {String} str The string to convert.\n * @returns {Number} The integer value represented by the string.\n * @api public\n */\nexport function decode(str) {\n    let decoded = 0;\n    for (i = 0; i < str.length; i++) {\n        decoded = decoded * length + map[str.charAt(i)];\n    }\n    return decoded;\n}\n/**\n * Yeast: A tiny growing id generator.\n *\n * @returns {String} A unique id.\n * @api public\n */\nexport function yeast() {\n    const now = encode(+new Date());\n    if (now !== prev)\n        return seed = 0, prev = now;\n    return now + '.' + encode(seed++);\n}\n//\n// Map each character to its index.\n//\nfor (; i < length; i++)\n    map[alphabet[i]] = i;\n","import globalThis from \"../globalThis.js\";\nexport const nextTick = (() => {\n    const isPromiseAvailable = typeof Promise === \"function\" && typeof Promise.resolve === \"function\";\n    if (isPromiseAvailable) {\n        return cb => Promise.resolve().then(cb);\n    }\n    else {\n        return (cb, setTimeoutFn) => setTimeoutFn(cb, 0);\n    }\n})();\nexport const WebSocket = globalThis.WebSocket || globalThis.MozWebSocket;\nexport const usingBrowserWebSocket = true;\nexport const defaultBinaryType = \"arraybuffer\";\n","import { Transport } from \"../transport.js\";\nimport { encode } from \"../contrib/parseqs.js\";\nimport { yeast } from \"../contrib/yeast.js\";\nimport { pick } from \"../util.js\";\nimport { defaultBinaryType, nextTick, usingBrowserWebSocket, WebSocket } from \"./websocket-constructor.js\";\nimport { encodePacket } from \"engine.io-parser\";\n// detect ReactNative environment\nconst isReactNative = typeof navigator !== \"undefined\" &&\n    typeof navigator.product === \"string\" &&\n    navigator.product.toLowerCase() === \"reactnative\";\nexport class WS extends Transport {\n    /**\n     * WebSocket transport constructor.\n     *\n     * @api {Object} connection options\n     * @api public\n     */\n    constructor(opts) {\n        super(opts);\n        this.supportsBinary = !opts.forceBase64;\n    }\n    /**\n     * Transport name.\n     *\n     * @api public\n     */\n    get name() {\n        return \"websocket\";\n    }\n    /**\n     * Opens socket.\n     *\n     * @api private\n     */\n    doOpen() {\n        if (!this.check()) {\n            // let probe timeout\n            return;\n        }\n        const uri = this.uri();\n        const protocols = this.opts.protocols;\n        // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n        const opts = isReactNative\n            ? {}\n            : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\", \"protocolVersion\", \"origin\", \"maxPayload\", \"family\", \"checkServerIdentity\");\n        if (this.opts.extraHeaders) {\n            opts.headers = this.opts.extraHeaders;\n        }\n        try {\n            this.ws =\n                usingBrowserWebSocket && !isReactNative\n                    ? protocols\n                        ? new WebSocket(uri, protocols)\n                        : new WebSocket(uri)\n                    : new WebSocket(uri, protocols, opts);\n        }\n        catch (err) {\n            return this.emitReserved(\"error\", err);\n        }\n        this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n        this.addEventListeners();\n    }\n    /**\n     * Adds event listeners to the socket\n     *\n     * @api private\n     */\n    addEventListeners() {\n        this.ws.onopen = () => {\n            if (this.opts.autoUnref) {\n                this.ws._socket.unref();\n            }\n            this.onOpen();\n        };\n        this.ws.onclose = closeEvent => this.onClose({\n            description: \"websocket connection closed\",\n            context: closeEvent\n        });\n        this.ws.onmessage = ev => this.onData(ev.data);\n        this.ws.onerror = e => this.onError(\"websocket error\", e);\n    }\n    /**\n     * Writes data to socket.\n     *\n     * @param {Array} array of packets.\n     * @api private\n     */\n    write(packets) {\n        this.writable = false;\n        // encodePacket efficient as it uses WS framing\n        // no need for encodePayload\n        for (let i = 0; i < packets.length; i++) {\n            const packet = packets[i];\n            const lastPacket = i === packets.length - 1;\n            encodePacket(packet, this.supportsBinary, data => {\n                // always create a new object (GH-437)\n                const opts = {};\n                if (!usingBrowserWebSocket) {\n                    if (packet.options) {\n                        opts.compress = packet.options.compress;\n                    }\n                    if (this.opts.perMessageDeflate) {\n                        const len = \n                        // @ts-ignore\n                        \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n                        if (len < this.opts.perMessageDeflate.threshold) {\n                            opts.compress = false;\n                        }\n                    }\n                }\n                // Sometimes the websocket has already been closed but the browser didn't\n                // have a chance of informing us about it yet, in that case send will\n                // throw an error\n                try {\n                    if (usingBrowserWebSocket) {\n                        // TypeError is thrown when passing the second argument on Safari\n                        this.ws.send(data);\n                    }\n                    else {\n                        this.ws.send(data, opts);\n                    }\n                }\n                catch (e) {\n                }\n                if (lastPacket) {\n                    // fake drain\n                    // defer to next tick to allow Socket to clear writeBuffer\n                    nextTick(() => {\n                        this.writable = true;\n                        this.emitReserved(\"drain\");\n                    }, this.setTimeoutFn);\n                }\n            });\n        }\n    }\n    /**\n     * Closes socket.\n     *\n     * @api private\n     */\n    doClose() {\n        if (typeof this.ws !== \"undefined\") {\n            this.ws.close();\n            this.ws = null;\n        }\n    }\n    /**\n     * Generates uri for connection.\n     *\n     * @api private\n     */\n    uri() {\n        let query = this.query || {};\n        const schema = this.opts.secure ? \"wss\" : \"ws\";\n        let port = \"\";\n        // avoid port if default for schema\n        if (this.opts.port &&\n            ((\"wss\" === schema && Number(this.opts.port) !== 443) ||\n                (\"ws\" === schema && Number(this.opts.port) !== 80))) {\n            port = \":\" + this.opts.port;\n        }\n        // append timestamp to URI\n        if (this.opts.timestampRequests) {\n            query[this.opts.timestampParam] = yeast();\n        }\n        // communicate binary support capabilities\n        if (!this.supportsBinary) {\n            query.b64 = 1;\n        }\n        const encodedQuery = encode(query);\n        const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n        return (schema +\n            \"://\" +\n            (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\n            port +\n            this.opts.path +\n            (encodedQuery.length ? \"?\" + encodedQuery : \"\"));\n    }\n    /**\n     * Feature detection for WebSocket.\n     *\n     * @return {Boolean} whether this transport is available.\n     * @api public\n     */\n    check() {\n        return (!!WebSocket &&\n            !(\"__initialize\" in WebSocket && this.name === WS.prototype.name));\n    }\n}\n","import { WS } from \"./websocket.js\";\nexport const transports = {\n    websocket: WS\n};\n","// imported from https://github.com/galkn/parseuri\n/**\n * Parses an URI\n *\n * @author Steven Levithan <stevenlevithan.com> (MIT license)\n * @api private\n */\nconst re = /^(?:(?![^:@]+:[^:@\\/]*@)(http|https|ws|wss):\\/\\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\\/?#]*)(?::(\\d*))?)(((\\/(?:[^?#](?![^?#\\/]*\\.[^?#\\/.]+(?:[?#]|$)))*\\/?)?([^?#\\/]*))(?:\\?([^#]*))?(?:#(.*))?)/;\nconst parts = [\n    'source', 'protocol', 'authority', 'userInfo', 'user', 'password', 'host', 'port', 'relative', 'path', 'directory', 'file', 'query', 'anchor'\n];\nexport function parse(str) {\n    const src = str, b = str.indexOf('['), e = str.indexOf(']');\n    if (b != -1 && e != -1) {\n        str = str.substring(0, b) + str.substring(b, e).replace(/:/g, ';') + str.substring(e, str.length);\n    }\n    let m = re.exec(str || ''), uri = {}, i = 14;\n    while (i--) {\n        uri[parts[i]] = m[i] || '';\n    }\n    if (b != -1 && e != -1) {\n        uri.source = src;\n        uri.host = uri.host.substring(1, uri.host.length - 1).replace(/;/g, ':');\n        uri.authority = uri.authority.replace('[', '').replace(']', '').replace(/;/g, ':');\n        uri.ipv6uri = true;\n    }\n    uri.pathNames = pathNames(uri, uri['path']);\n    uri.queryKey = queryKey(uri, uri['query']);\n    return uri;\n}\nfunction pathNames(obj, path) {\n    const regx = /\\/{2,9}/g, names = path.replace(regx, \"/\").split(\"/\");\n    if (path.substr(0, 1) == '/' || path.length === 0) {\n        names.splice(0, 1);\n    }\n    if (path.substr(path.length - 1, 1) == '/') {\n        names.splice(names.length - 1, 1);\n    }\n    return names;\n}\nfunction queryKey(uri, query) {\n    const data = {};\n    query.replace(/(?:^|&)([^&=]*)=?([^&]*)/g, function ($0, $1, $2) {\n        if ($1) {\n            data[$1] = $2;\n        }\n    });\n    return data;\n}\n","import { transports } from \"./transports/index.js\";\nimport { installTimerFunctions, byteLength } from \"./util.js\";\nimport { decode } from \"./contrib/parseqs.js\";\nimport { parse } from \"./contrib/parseuri.js\";\nimport { Emitter } from \"@socket.io/component-emitter\";\nimport { protocol } from \"engine.io-parser\";\nexport class Socket extends Emitter {\n    /**\n     * Socket constructor.\n     *\n     * @param {String|Object} uri or options\n     * @param {Object} opts - options\n     * @api public\n     */\n    constructor(uri, opts = {}) {\n        super();\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = null;\n        }\n        if (uri) {\n            uri = parse(uri);\n            opts.hostname = uri.host;\n            opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n            opts.port = uri.port;\n            if (uri.query)\n                opts.query = uri.query;\n        }\n        else if (opts.host) {\n            opts.hostname = parse(opts.host).host;\n        }\n        installTimerFunctions(this, opts);\n        this.secure =\n            null != opts.secure\n                ? opts.secure\n                : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n        if (opts.hostname && !opts.port) {\n            // if no port is specified manually, use the protocol default\n            opts.port = this.secure ? \"443\" : \"80\";\n        }\n        this.hostname =\n            opts.hostname ||\n                (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n        this.port =\n            opts.port ||\n                (typeof location !== \"undefined\" && location.port\n                    ? location.port\n                    : this.secure\n                        ? \"443\"\n                        : \"80\");\n        this.transports = opts.transports || [\"websocket\"];\n        this.readyState = \"\";\n        this.writeBuffer = [];\n        this.prevBufferLen = 0;\n        this.opts = Object.assign({\n            path: \"/engine.io\",\n            agent: false,\n            withCredentials: false,\n            upgrade: true,\n            timestampParam: \"t\",\n            rememberUpgrade: false,\n            rejectUnauthorized: true,\n            perMessageDeflate: {\n                threshold: 1024\n            },\n            transportOptions: {},\n            closeOnBeforeunload: true\n        }, opts);\n        this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\n        if (typeof this.opts.query === \"string\") {\n            this.opts.query = decode(this.opts.query);\n        }\n        // set on handshake\n        this.id = null;\n        this.upgrades = null;\n        this.pingInterval = null;\n        this.pingTimeout = null;\n        // set on heartbeat\n        this.pingTimeoutTimer = null;\n        if (typeof addEventListener === \"function\") {\n            if (this.opts.closeOnBeforeunload) {\n                // Firefox closes the connection when the \"beforeunload\" event is emitted but not Chrome. This event listener\n                // ensures every browser behaves the same (no \"disconnect\" event at the Socket.IO level when the page is\n                // closed/reloaded)\n                addEventListener(\"beforeunload\", () => {\n                    if (this.transport) {\n                        // silently close the transport\n                        this.transport.removeAllListeners();\n                        this.transport.close();\n                    }\n                }, false);\n            }\n            if (this.hostname !== \"localhost\") {\n                this.offlineEventListener = () => {\n                    this.onClose(\"transport close\", {\n                        description: \"network connection lost\"\n                    });\n                };\n                addEventListener(\"offline\", this.offlineEventListener, false);\n            }\n        }\n        this.open();\n    }\n    /**\n     * Creates transport of the given type.\n     *\n     * @param {String} transport name\n     * @return {Transport}\n     * @api private\n     */\n    createTransport(name) {\n        const query = clone(this.opts.query);\n        // append engine.io protocol identifier\n        query.EIO = protocol;\n        // transport name\n        query.transport = name;\n        // session id if we already have one\n        if (this.id)\n            query.sid = this.id;\n        const opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n            query,\n            socket: this,\n            hostname: this.hostname,\n            secure: this.secure,\n            port: this.port\n        });\n        return new transports[name](opts);\n    }\n    /**\n     * Initializes transport to use and starts probe.\n     *\n     * @api private\n     */\n    open() {\n        let transport;\n        if (this.opts.rememberUpgrade &&\n            Socket.priorWebsocketSuccess &&\n            this.transports.indexOf(\"websocket\") !== -1) {\n            transport = \"websocket\";\n        }\n        else if (0 === this.transports.length) {\n            // Emit error on next tick so it can be listened to\n            this.setTimeoutFn(() => {\n                this.emitReserved(\"error\", \"No transports available\");\n            }, 0);\n            return;\n        }\n        else {\n            transport = this.transports[0];\n        }\n        this.readyState = \"opening\";\n        // Retry with the next transport if the transport is disabled (jsonp: false)\n        try {\n            transport = this.createTransport(transport);\n        }\n        catch (e) {\n            this.transports.shift();\n            this.open();\n            return;\n        }\n        transport.open();\n        this.setTransport(transport);\n    }\n    /**\n     * Sets the current transport. Disables the existing one (if any).\n     *\n     * @api private\n     */\n    setTransport(transport) {\n        if (this.transport) {\n            this.transport.removeAllListeners();\n        }\n        // set up transport\n        this.transport = transport;\n        // set up transport listeners\n        transport\n            .on(\"drain\", this.onDrain.bind(this))\n            .on(\"packet\", this.onPacket.bind(this))\n            .on(\"error\", this.onError.bind(this))\n            .on(\"close\", reason => this.onClose(\"transport close\", reason));\n    }\n    /**\n     * Probes a transport.\n     *\n     * @param {String} transport name\n     * @api private\n     */\n    probe(name) {\n        let transport = this.createTransport(name);\n        let failed = false;\n        Socket.priorWebsocketSuccess = false;\n        const onTransportOpen = () => {\n            if (failed)\n                return;\n            transport.send([{ type: \"ping\", data: \"probe\" }]);\n            transport.once(\"packet\", msg => {\n                if (failed)\n                    return;\n                if (\"pong\" === msg.type && \"probe\" === msg.data) {\n                    this.upgrading = true;\n                    this.emitReserved(\"upgrading\", transport);\n                    if (!transport)\n                        return;\n                    Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n                    this.transport.pause(() => {\n                        if (failed)\n                            return;\n                        if (\"closed\" === this.readyState)\n                            return;\n                        cleanup();\n                        this.setTransport(transport);\n                        transport.send([{ type: \"upgrade\" }]);\n                        this.emitReserved(\"upgrade\", transport);\n                        transport = null;\n                        this.upgrading = false;\n                        this.flush();\n                    });\n                }\n                else {\n                    const err = new Error(\"probe error\");\n                    // @ts-ignore\n                    err.transport = transport.name;\n                    this.emitReserved(\"upgradeError\", err);\n                }\n            });\n        };\n        function freezeTransport() {\n            if (failed)\n                return;\n            // Any callback called by transport should be ignored since now\n            failed = true;\n            cleanup();\n            transport.close();\n            transport = null;\n        }\n        // Handle any error that happens while probing\n        const onerror = err => {\n            const error = new Error(\"probe error: \" + err);\n            // @ts-ignore\n            error.transport = transport.name;\n            freezeTransport();\n            this.emitReserved(\"upgradeError\", error);\n        };\n        function onTransportClose() {\n            onerror(\"transport closed\");\n        }\n        // When the socket is closed while we're probing\n        function onclose() {\n            onerror(\"socket closed\");\n        }\n        // When the socket is upgraded while we're probing\n        function onupgrade(to) {\n            if (transport && to.name !== transport.name) {\n                freezeTransport();\n            }\n        }\n        // Remove all listeners on the transport and on self\n        const cleanup = () => {\n            transport.removeListener(\"open\", onTransportOpen);\n            transport.removeListener(\"error\", onerror);\n            transport.removeListener(\"close\", onTransportClose);\n            this.off(\"close\", onclose);\n            this.off(\"upgrading\", onupgrade);\n        };\n        transport.once(\"open\", onTransportOpen);\n        transport.once(\"error\", onerror);\n        transport.once(\"close\", onTransportClose);\n        this.once(\"close\", onclose);\n        this.once(\"upgrading\", onupgrade);\n        transport.open();\n    }\n    /**\n     * Called when connection is deemed open.\n     *\n     * @api private\n     */\n    onOpen() {\n        this.readyState = \"open\";\n        Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n        this.emitReserved(\"open\");\n        this.flush();\n        // we check for `readyState` in case an `open`\n        // listener already closed the socket\n        if (\"open\" === this.readyState &&\n            this.opts.upgrade &&\n            this.transport.pause) {\n            let i = 0;\n            const l = this.upgrades.length;\n            for (; i < l; i++) {\n                this.probe(this.upgrades[i]);\n            }\n        }\n    }\n    /**\n     * Handles a packet.\n     *\n     * @api private\n     */\n    onPacket(packet) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            this.emitReserved(\"packet\", packet);\n            // Socket is live - any packet counts\n            this.emitReserved(\"heartbeat\");\n            switch (packet.type) {\n                case \"open\":\n                    this.onHandshake(JSON.parse(packet.data));\n                    break;\n                case \"ping\":\n                    this.resetPingTimeout();\n                    this.sendPacket(\"pong\");\n                    this.emitReserved(\"ping\");\n                    this.emitReserved(\"pong\");\n                    break;\n                case \"error\":\n                    const err = new Error(\"server error\");\n                    // @ts-ignore\n                    err.code = packet.data;\n                    this.onError(err);\n                    break;\n                case \"message\":\n                    this.emitReserved(\"data\", packet.data);\n                    this.emitReserved(\"message\", packet.data);\n                    break;\n            }\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon handshake completion.\n     *\n     * @param {Object} data - handshake obj\n     * @api private\n     */\n    onHandshake(data) {\n        this.emitReserved(\"handshake\", data);\n        this.id = data.sid;\n        this.transport.query.sid = data.sid;\n        this.upgrades = this.filterUpgrades(data.upgrades);\n        this.pingInterval = data.pingInterval;\n        this.pingTimeout = data.pingTimeout;\n        this.maxPayload = data.maxPayload;\n        this.onOpen();\n        // In case open handler closes socket\n        if (\"closed\" === this.readyState)\n            return;\n        this.resetPingTimeout();\n    }\n    /**\n     * Sets and resets ping timeout timer based on server pings.\n     *\n     * @api private\n     */\n    resetPingTimeout() {\n        this.clearTimeoutFn(this.pingTimeoutTimer);\n        this.pingTimeoutTimer = this.setTimeoutFn(() => {\n            this.onClose(\"ping timeout\");\n        }, this.pingInterval + this.pingTimeout);\n        if (this.opts.autoUnref) {\n            this.pingTimeoutTimer.unref();\n        }\n    }\n    /**\n     * Called on `drain` event\n     *\n     * @api private\n     */\n    onDrain() {\n        this.writeBuffer.splice(0, this.prevBufferLen);\n        // setting prevBufferLen = 0 is very important\n        // for example, when upgrading, upgrade packet is sent over,\n        // and a nonzero prevBufferLen could cause problems on `drain`\n        this.prevBufferLen = 0;\n        if (0 === this.writeBuffer.length) {\n            this.emitReserved(\"drain\");\n        }\n        else {\n            this.flush();\n        }\n    }\n    /**\n     * Flush write buffers.\n     *\n     * @api private\n     */\n    flush() {\n        if (\"closed\" !== this.readyState &&\n            this.transport.writable &&\n            !this.upgrading &&\n            this.writeBuffer.length) {\n            const packets = this.getWritablePackets();\n            this.transport.send(packets);\n            // keep track of current length of writeBuffer\n            // splice writeBuffer and callbackBuffer on `drain`\n            this.prevBufferLen = packets.length;\n            this.emitReserved(\"flush\");\n        }\n    }\n    /**\n     * Ensure the encoded size of the writeBuffer is below the maxPayload value sent by the server (only for HTTP\n     * long-polling)\n     *\n     * @private\n     */\n    getWritablePackets() {\n        const shouldCheckPayloadSize = this.maxPayload &&\n            this.transport.name === \"polling\" &&\n            this.writeBuffer.length > 1;\n        if (!shouldCheckPayloadSize) {\n            return this.writeBuffer;\n        }\n        let payloadSize = 1; // first packet type\n        for (let i = 0; i < this.writeBuffer.length; i++) {\n            const data = this.writeBuffer[i].data;\n            if (data) {\n                payloadSize += byteLength(data);\n            }\n            if (i > 0 && payloadSize > this.maxPayload) {\n                return this.writeBuffer.slice(0, i);\n            }\n            payloadSize += 2; // separator + packet type\n        }\n        return this.writeBuffer;\n    }\n    /**\n     * Sends a message.\n     *\n     * @param {String} message.\n     * @param {Function} callback function.\n     * @param {Object} options.\n     * @return {Socket} for chaining.\n     * @api public\n     */\n    write(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    send(msg, options, fn) {\n        this.sendPacket(\"message\", msg, options, fn);\n        return this;\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param {String} packet type.\n     * @param {String} data.\n     * @param {Object} options.\n     * @param {Function} callback function.\n     * @api private\n     */\n    sendPacket(type, data, options, fn) {\n        if (\"function\" === typeof data) {\n            fn = data;\n            data = undefined;\n        }\n        if (\"function\" === typeof options) {\n            fn = options;\n            options = null;\n        }\n        if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n            return;\n        }\n        options = options || {};\n        options.compress = false !== options.compress;\n        const packet = {\n            type: type,\n            data: data,\n            options: options\n        };\n        this.emitReserved(\"packetCreate\", packet);\n        this.writeBuffer.push(packet);\n        if (fn)\n            this.once(\"flush\", fn);\n        this.flush();\n    }\n    /**\n     * Closes the connection.\n     *\n     * @api public\n     */\n    close() {\n        const close = () => {\n            this.onClose(\"forced close\");\n            this.transport.close();\n        };\n        const cleanupAndClose = () => {\n            this.off(\"upgrade\", cleanupAndClose);\n            this.off(\"upgradeError\", cleanupAndClose);\n            close();\n        };\n        const waitForUpgrade = () => {\n            // wait for upgrade to finish since we can't send packets while pausing a transport\n            this.once(\"upgrade\", cleanupAndClose);\n            this.once(\"upgradeError\", cleanupAndClose);\n        };\n        if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n            this.readyState = \"closing\";\n            if (this.writeBuffer.length) {\n                this.once(\"drain\", () => {\n                    if (this.upgrading) {\n                        waitForUpgrade();\n                    }\n                    else {\n                        close();\n                    }\n                });\n            }\n            else if (this.upgrading) {\n                waitForUpgrade();\n            }\n            else {\n                close();\n            }\n        }\n        return this;\n    }\n    /**\n     * Called upon transport error\n     *\n     * @api private\n     */\n    onError(err) {\n        Socket.priorWebsocketSuccess = false;\n        this.emitReserved(\"error\", err);\n        this.onClose(\"transport error\", err);\n    }\n    /**\n     * Called upon transport close.\n     *\n     * @api private\n     */\n    onClose(reason, description) {\n        if (\"opening\" === this.readyState ||\n            \"open\" === this.readyState ||\n            \"closing\" === this.readyState) {\n            // clear timers\n            this.clearTimeoutFn(this.pingTimeoutTimer);\n            // stop event from firing again for transport\n            this.transport.removeAllListeners(\"close\");\n            // ensure transport won't stay open\n            this.transport.close();\n            // ignore further transport communication\n            this.transport.removeAllListeners();\n            if (typeof removeEventListener === \"function\") {\n                removeEventListener(\"offline\", this.offlineEventListener, false);\n            }\n            // set ready state\n            this.readyState = \"closed\";\n            // clear session id\n            this.id = null;\n            // emit close event\n            this.emitReserved(\"close\", reason, description);\n            // clean buffers after, so users can still\n            // grab the buffers on `close` event\n            this.writeBuffer = [];\n            this.prevBufferLen = 0;\n        }\n    }\n    /**\n     * Filters upgrades, returning only those matching client transports.\n     *\n     * @param {Array} server upgrades\n     * @api private\n     *\n     */\n    filterUpgrades(upgrades) {\n        const filteredUpgrades = [];\n        let i = 0;\n        const j = upgrades.length;\n        for (; i < j; i++) {\n            if (~this.transports.indexOf(upgrades[i]))\n                filteredUpgrades.push(upgrades[i]);\n        }\n        return filteredUpgrades;\n    }\n}\nSocket.protocol = protocol;\nfunction clone(obj) {\n    const o = {};\n    for (let i in obj) {\n        if (obj.hasOwnProperty(i)) {\n            o[i] = obj[i];\n        }\n    }\n    return o;\n}\n","import encodePacket from \"./encodePacket.js\";\nimport decodePacket from \"./decodePacket.js\";\nconst SEPARATOR = String.fromCharCode(30); // see https://en.wikipedia.org/wiki/Delimiter#ASCII_delimited_text\nconst encodePayload = (packets, callback) => {\n    // some packets may be added to the array while encoding, so the initial length must be saved\n    const length = packets.length;\n    const encodedPackets = new Array(length);\n    let count = 0;\n    packets.forEach((packet, i) => {\n        // force base64 encoding for binary packets\n        encodePacket(packet, false, encodedPacket => {\n            encodedPackets[i] = encodedPacket;\n            if (++count === length) {\n                callback(encodedPackets.join(SEPARATOR));\n            }\n        });\n    });\n};\nconst decodePayload = (encodedPayload, binaryType) => {\n    const encodedPackets = encodedPayload.split(SEPARATOR);\n    const packets = [];\n    for (let i = 0; i < encodedPackets.length; i++) {\n        const decodedPacket = decodePacket(encodedPackets[i], binaryType);\n        packets.push(decodedPacket);\n        if (decodedPacket.type === \"error\") {\n            break;\n        }\n    }\n    return packets;\n};\nexport const protocol = 4;\nexport { encodePacket, encodePayload, decodePacket, decodePayload };\n","import { Emitter } from \"@socket.io/component-emitter\";\n/**\n * Protocol version.\n *\n * @public\n */\nexport const protocol = 5;\nexport var PacketType;\n(function (PacketType) {\n    PacketType[PacketType[\"CONNECT\"] = 0] = \"CONNECT\";\n    PacketType[PacketType[\"DISCONNECT\"] = 1] = \"DISCONNECT\";\n    PacketType[PacketType[\"EVENT\"] = 2] = \"EVENT\";\n    PacketType[PacketType[\"ACK\"] = 3] = \"ACK\";\n    PacketType[PacketType[\"CONNECT_ERROR\"] = 4] = \"CONNECT_ERROR\";\n    PacketType[PacketType[\"BINARY_EVENT\"] = 5] = \"BINARY_EVENT\";\n    PacketType[PacketType[\"BINARY_ACK\"] = 6] = \"BINARY_ACK\";\n})(PacketType || (PacketType = {}));\n/**\n * A socket.io Encoder instance\n */\nexport class Encoder {\n    /**\n     * Encode a packet as a single string if non-binary, or as a\n     * buffer sequence, depending on packet type.\n     *\n     * @param {Object} obj - packet object\n     */\n    encode(obj) {\n        return [this.encodeAsString(obj)];\n    }\n    /**\n     * Encode packet as string.\n     */\n    encodeAsString(obj) {\n        // first is type\n        let str = \"\" + obj.type;\n        // attachments if we have them\n        if (obj.type === PacketType.BINARY_EVENT ||\n            obj.type === PacketType.BINARY_ACK) {\n            str += obj.attachments + \"-\";\n        }\n        // if we have a namespace other than `/`\n        // we append it followed by a comma `,`\n        if (obj.nsp && \"/\" !== obj.nsp) {\n            str += obj.nsp + \",\";\n        }\n        // immediately followed by the id\n        if (null != obj.id) {\n            str += obj.id;\n        }\n        // json data\n        if (null != obj.data) {\n            str += JSON.stringify(obj.data);\n        }\n        return str;\n    }\n}\n/**\n * A socket.io Decoder instance\n *\n * @return {Object} decoder\n */\nexport class Decoder extends Emitter {\n    constructor() {\n        super();\n    }\n    /**\n     * Decodes an encoded packet string into packet JSON.\n     *\n     * @param {String} obj - encoded packet\n     */\n    add(obj) {\n        let packet;\n        if (typeof obj === \"string\") {\n            packet = this.decodeString(obj);\n            if (packet.type === PacketType.BINARY_EVENT ||\n                packet.type === PacketType.BINARY_ACK) {\n                // no attachments, labeled binary but no binary data to follow\n                if (packet.attachments === 0) {\n                    super.emitReserved(\"decoded\", packet);\n                }\n            }\n            else {\n                // non-binary full packet\n                super.emitReserved(\"decoded\", packet);\n            }\n        }\n        else {\n            throw new Error(\"Unknown type: \" + obj);\n        }\n    }\n    /**\n     * Decode a packet String (JSON data)\n     *\n     * @param {String} str\n     * @return {Object} packet\n     */\n    decodeString(str) {\n        let i = 0;\n        // look up type\n        const p = {\n            type: Number(str.charAt(0)),\n        };\n        if (PacketType[p.type] === undefined) {\n            throw new Error(\"unknown packet type \" + p.type);\n        }\n        // look up attachments if type binary\n        if (p.type === PacketType.BINARY_EVENT ||\n            p.type === PacketType.BINARY_ACK) {\n            const start = i + 1;\n            while (str.charAt(++i) !== \"-\" && i != str.length) { }\n            const buf = str.substring(start, i);\n            if (buf != Number(buf) || str.charAt(i) !== \"-\") {\n                throw new Error(\"Illegal attachments\");\n            }\n            p.attachments = Number(buf);\n        }\n        // look up namespace (if any)\n        if (\"/\" === str.charAt(i + 1)) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (\",\" === c)\n                    break;\n                if (i === str.length)\n                    break;\n            }\n            p.nsp = str.substring(start, i);\n        }\n        else {\n            p.nsp = \"/\";\n        }\n        // look up id\n        const next = str.charAt(i + 1);\n        if (\"\" !== next && Number(next) == next) {\n            const start = i + 1;\n            while (++i) {\n                const c = str.charAt(i);\n                if (null == c || Number(c) != c) {\n                    --i;\n                    break;\n                }\n                if (i === str.length)\n                    break;\n            }\n            p.id = Number(str.substring(start, i + 1));\n        }\n        // look up json data\n        if (str.charAt(++i)) {\n            const payload = tryParse(str.substr(i));\n            if (Decoder.isPayloadValid(p.type, payload)) {\n                p.data = payload;\n            }\n            else {\n                throw new Error(\"invalid payload\");\n            }\n        }\n        return p;\n    }\n    static isPayloadValid(type, payload) {\n        switch (type) {\n            case PacketType.CONNECT:\n                return typeof payload === \"object\";\n            case PacketType.DISCONNECT:\n                return payload === undefined;\n            case PacketType.CONNECT_ERROR:\n                return typeof payload === \"string\" || typeof payload === \"object\";\n            case PacketType.EVENT:\n            case PacketType.BINARY_EVENT:\n                return Array.isArray(payload) && payload.length > 0;\n            case PacketType.ACK:\n            case PacketType.BINARY_ACK:\n                return Array.isArray(payload);\n        }\n    }\n    /**\n     * Deallocates a parser's resources\n     */\n    destroy() {\n    }\n}\nfunction tryParse(str) {\n    try {\n        return JSON.parse(str);\n    }\n    catch (e) {\n        return false;\n    }\n}\n","export function on(obj, ev, fn) {\n    obj.on(ev, fn);\n    return function subDestroy() {\n        obj.off(ev, fn);\n    };\n}\n","import { PacketType } from \"./parser.js\";\nimport { on } from \"./on.js\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\n/**\n * Internal events.\n * These events can't be emitted by the user.\n */\nconst RESERVED_EVENTS = Object.freeze({\n    connect: 1,\n    connect_error: 1,\n    disconnect: 1,\n    disconnecting: 1,\n    // EventEmitter reserved events: https://nodejs.org/api/events.html#events_event_newlistener\n    newListener: 1,\n    removeListener: 1,\n});\nexport class Socket extends Emitter {\n    /**\n     * `Socket` constructor.\n     *\n     * @public\n     */\n    constructor(io, nsp, opts) {\n        super();\n        this.connected = false;\n        this.disconnected = true;\n        this.receiveBuffer = [];\n        this.sendBuffer = [];\n        this.ids = 0;\n        this.acks = {};\n        this.flags = {};\n        this.io = io;\n        this.nsp = nsp;\n        if (opts && opts.auth) {\n            this.auth = opts.auth;\n        }\n        if (this.io._autoConnect)\n            this.open();\n    }\n    /**\n     * Subscribe to open, close and packet events\n     *\n     * @private\n     */\n    subEvents() {\n        if (this.subs)\n            return;\n        const io = this.io;\n        this.subs = [\n            on(io, \"open\", this.onopen.bind(this)),\n            on(io, \"packet\", this.onpacket.bind(this)),\n            on(io, \"error\", this.onerror.bind(this)),\n            on(io, \"close\", this.onclose.bind(this)),\n        ];\n    }\n    /**\n     * Whether the Socket will try to reconnect when its Manager connects or reconnects\n     */\n    get active() {\n        return !!this.subs;\n    }\n    /**\n     * \"Opens\" the socket.\n     *\n     * @public\n     */\n    connect() {\n        if (this.connected)\n            return this;\n        this.subEvents();\n        if (!this.io[\"_reconnecting\"])\n            this.io.open(); // ensure open\n        if (\"open\" === this.io._readyState)\n            this.onopen();\n        return this;\n    }\n    /**\n     * Alias for connect()\n     */\n    open() {\n        return this.connect();\n    }\n    /**\n     * Sends a `message` event.\n     *\n     * @return self\n     * @public\n     */\n    send(...args) {\n        args.unshift(\"message\");\n        this.emit.apply(this, args);\n        return this;\n    }\n    /**\n     * Override `emit`.\n     * If the event is in `events`, it's emitted normally.\n     *\n     * @return self\n     * @public\n     */\n    emit(ev, ...args) {\n        if (RESERVED_EVENTS.hasOwnProperty(ev)) {\n            throw new Error('\"' + ev + '\" is a reserved event name');\n        }\n        args.unshift(ev);\n        const packet = {\n            type: PacketType.EVENT,\n            data: args,\n        };\n        packet.options = {};\n        packet.options.compress = this.flags.compress !== false;\n        // event ack callback\n        if (\"function\" === typeof args[args.length - 1]) {\n            const id = this.ids++;\n            const ack = args.pop();\n            this._registerAckCallback(id, ack);\n            packet.id = id;\n        }\n        const isTransportWritable = this.io.engine &&\n            this.io.engine.transport &&\n            this.io.engine.transport.writable;\n        const discardPacket = this.flags.volatile && (!isTransportWritable || !this.connected);\n        if (discardPacket) {\n        }\n        else if (this.connected) {\n            this.packet(packet);\n        }\n        else {\n            this.sendBuffer.push(packet);\n        }\n        this.flags = {};\n        return this;\n    }\n    /**\n     * @private\n     */\n    _registerAckCallback(id, ack) {\n        const timeout = this.flags.timeout;\n        if (timeout === undefined) {\n            this.acks[id] = ack;\n            return;\n        }\n        // @ts-ignore\n        const timer = this.io.setTimeoutFn(() => {\n            delete this.acks[id];\n            for (let i = 0; i < this.sendBuffer.length; i++) {\n                if (this.sendBuffer[i].id === id) {\n                    this.sendBuffer.splice(i, 1);\n                }\n            }\n            ack.call(this, new Error(\"operation has timed out\"));\n        }, timeout);\n        this.acks[id] = (...args) => {\n            // @ts-ignore\n            this.io.clearTimeoutFn(timer);\n            ack.apply(this, [null, ...args]);\n        };\n    }\n    /**\n     * Sends a packet.\n     *\n     * @param packet\n     * @private\n     */\n    packet(packet) {\n        packet.nsp = this.nsp;\n        this.io._packet(packet);\n    }\n    /**\n     * Called upon engine `open`.\n     *\n     * @private\n     */\n    onopen() {\n        if (typeof this.auth == \"function\") {\n            this.auth((data) => {\n                this.packet({ type: PacketType.CONNECT, data });\n            });\n        }\n        else {\n            this.packet({ type: PacketType.CONNECT, data: this.auth });\n        }\n    }\n    /**\n     * Called upon engine or manager `error`.\n     *\n     * @param err\n     * @private\n     */\n    onerror(err) {\n        if (!this.connected) {\n            this.emitReserved(\"connect_error\", err);\n        }\n    }\n    /**\n     * Called upon engine `close`.\n     *\n     * @param reason\n     * @private\n     */\n    onclose(reason) {\n        this.connected = false;\n        this.disconnected = true;\n        delete this.id;\n        this.emitReserved(\"disconnect\", reason);\n    }\n    /**\n     * Called with socket packet.\n     *\n     * @param packet\n     * @private\n     */\n    onpacket(packet) {\n        const sameNamespace = packet.nsp === this.nsp;\n        if (!sameNamespace)\n            return;\n        switch (packet.type) {\n            case PacketType.CONNECT:\n                if (packet.data && packet.data.sid) {\n                    const id = packet.data.sid;\n                    this.onconnect(id);\n                }\n                else {\n                    this.emitReserved(\"connect_error\", new Error(\"It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)\"));\n                }\n                break;\n            case PacketType.EVENT:\n                this.onevent(packet);\n                break;\n            case PacketType.BINARY_EVENT:\n                //this.onevent(packet);\n                break;\n            case PacketType.ACK:\n                this.onack(packet);\n                break;\n            case PacketType.BINARY_ACK:\n                //this.onack(packet);\n                break;\n            case PacketType.DISCONNECT:\n                this.ondisconnect();\n                break;\n            case PacketType.CONNECT_ERROR:\n                this.destroy();\n                const err = new Error(packet.data.message);\n                // @ts-ignore\n                err.data = packet.data.data;\n                this.emitReserved(\"connect_error\", err);\n                break;\n        }\n    }\n    /**\n     * Called upon a server event.\n     *\n     * @param packet\n     * @private\n     */\n    onevent(packet) {\n        const args = packet.data || [];\n        if (null != packet.id) {\n            args.push(this.ack(packet.id));\n        }\n        if (this.connected) {\n            this.emitEvent(args);\n        }\n        else {\n            this.receiveBuffer.push(Object.freeze(args));\n        }\n    }\n    emitEvent(args) {\n        if (this._anyListeners && this._anyListeners.length) {\n            const listeners = this._anyListeners.slice();\n            for (const listener of listeners) {\n                listener.apply(this, args);\n            }\n        }\n        super.emit.apply(this, args);\n    }\n    /**\n     * Produces an ack callback to emit with an event.\n     *\n     * @private\n     */\n    ack(id) {\n        const self = this;\n        let sent = false;\n        return function (...args) {\n            // prevent double callbacks\n            if (sent)\n                return;\n            sent = true;\n            self.packet({\n                type: PacketType.ACK,\n                id: id,\n                data: args,\n            });\n        };\n    }\n    /**\n     * Called upon a server acknowlegement.\n     *\n     * @param packet\n     * @private\n     */\n    onack(packet) {\n        const ack = this.acks[packet.id];\n        if (\"function\" === typeof ack) {\n            ack.apply(this, packet.data);\n            delete this.acks[packet.id];\n        }\n        else {\n        }\n    }\n    /**\n     * Called upon server connect.\n     *\n     * @private\n     */\n    onconnect(id) {\n        this.id = id;\n        this.connected = true;\n        this.disconnected = false;\n        this.emitBuffered();\n        this.emitReserved(\"connect\");\n    }\n    /**\n     * Emit buffered events (received and emitted).\n     *\n     * @private\n     */\n    emitBuffered() {\n        this.receiveBuffer.forEach((args) => this.emitEvent(args));\n        this.receiveBuffer = [];\n        this.sendBuffer.forEach((packet) => this.packet(packet));\n        this.sendBuffer = [];\n    }\n    /**\n     * Called upon server disconnect.\n     *\n     * @private\n     */\n    ondisconnect() {\n        this.destroy();\n        this.onclose(\"io server disconnect\");\n    }\n    /**\n     * Called upon forced client/server side disconnections,\n     * this method ensures the manager stops tracking us and\n     * that reconnections don't get triggered for this.\n     *\n     * @private\n     */\n    destroy() {\n        if (this.subs) {\n            // clean subscriptions to avoid reconnections\n            this.subs.forEach((subDestroy) => subDestroy());\n            this.subs = undefined;\n        }\n        this.io[\"_destroy\"](this);\n    }\n    /**\n     * Disconnects the socket manually.\n     *\n     * @return self\n     * @public\n     */\n    disconnect() {\n        if (this.connected) {\n            this.packet({ type: PacketType.DISCONNECT });\n        }\n        // remove socket from pool\n        this.destroy();\n        if (this.connected) {\n            // fire events\n            this.onclose(\"io client disconnect\");\n        }\n        return this;\n    }\n    /**\n     * Alias for disconnect()\n     *\n     * @return self\n     * @public\n     */\n    close() {\n        return this.disconnect();\n    }\n    /**\n     * Sets the compress flag.\n     *\n     * @param compress - if `true`, compresses the sending data\n     * @return self\n     * @public\n     */\n    compress(compress) {\n        this.flags.compress = compress;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the event message will be dropped when this socket is not\n     * ready to send messages.\n     *\n     * @returns self\n     * @public\n     */\n    get volatile() {\n        this.flags.volatile = true;\n        return this;\n    }\n    /**\n     * Sets a modifier for a subsequent event emission that the callback will be called with an error when the\n     * given number of milliseconds have elapsed without an acknowledgement from the server:\n     *\n     * ```\n     * socket.timeout(5000).emit(\"my-event\", (err) => {\n     *   if (err) {\n     *     // the server did not acknowledge the event in the given delay\n     *   }\n     * });\n     * ```\n     *\n     * @returns self\n     * @public\n     */\n    timeout(timeout) {\n        this.flags.timeout = timeout;\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback.\n     *\n     * @param listener\n     * @public\n     */\n    onAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.push(listener);\n        return this;\n    }\n    /**\n     * Adds a listener that will be fired when any event is emitted. The event name is passed as the first argument to the\n     * callback. The listener is added to the beginning of the listeners array.\n     *\n     * @param listener\n     * @public\n     */\n    prependAny(listener) {\n        this._anyListeners = this._anyListeners || [];\n        this._anyListeners.unshift(listener);\n        return this;\n    }\n    /**\n     * Removes the listener that will be fired when any event is emitted.\n     *\n     * @param listener\n     * @public\n     */\n    offAny(listener) {\n        if (!this._anyListeners) {\n            return this;\n        }\n        if (listener) {\n            const listeners = this._anyListeners;\n            for (let i = 0; i < listeners.length; i++) {\n                if (listener === listeners[i]) {\n                    listeners.splice(i, 1);\n                    return this;\n                }\n            }\n        }\n        else {\n            this._anyListeners = [];\n        }\n        return this;\n    }\n    /**\n     * Returns an array of listeners that are listening for any event that is specified. This array can be manipulated,\n     * e.g. to remove listeners.\n     *\n     * @public\n     */\n    listenersAny() {\n        return this._anyListeners || [];\n    }\n}\n","\n/**\n * Expose `Backoff`.\n */\n\nmodule.exports = Backoff;\n\n/**\n * Initialize backoff timer with `opts`.\n *\n * - `min` initial timeout in milliseconds [100]\n * - `max` max timeout [10000]\n * - `jitter` [0]\n * - `factor` [2]\n *\n * @param {Object} opts\n * @api public\n */\n\nfunction Backoff(opts) {\n  opts = opts || {};\n  this.ms = opts.min || 100;\n  this.max = opts.max || 10000;\n  this.factor = opts.factor || 2;\n  this.jitter = opts.jitter > 0 && opts.jitter <= 1 ? opts.jitter : 0;\n  this.attempts = 0;\n}\n\n/**\n * Return the backoff duration.\n *\n * @return {Number}\n * @api public\n */\n\nBackoff.prototype.duration = function(){\n  var ms = this.ms * Math.pow(this.factor, this.attempts++);\n  if (this.jitter) {\n    var rand =  Math.random();\n    var deviation = Math.floor(rand * this.jitter * ms);\n    ms = (Math.floor(rand * 10) & 1) == 0  ? ms - deviation : ms + deviation;\n  }\n  return Math.min(ms, this.max) | 0;\n};\n\n/**\n * Reset the number of attempts.\n *\n * @api public\n */\n\nBackoff.prototype.reset = function(){\n  this.attempts = 0;\n};\n\n/**\n * Set the minimum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMin = function(min){\n  this.ms = min;\n};\n\n/**\n * Set the maximum duration\n *\n * @api public\n */\n\nBackoff.prototype.setMax = function(max){\n  this.max = max;\n};\n\n/**\n * Set the jitter\n *\n * @api public\n */\n\nBackoff.prototype.setJitter = function(jitter){\n  this.jitter = jitter;\n};\n\n","// @ts-ignore\nimport { Socket as Engine, installTimerFunctions, } from \"engine.io-client\";\nimport { Socket } from \"./socket.js\";\nimport * as parser from \"./parser.js\";\nimport { on } from \"./on.js\";\nimport Backoff from \"backo2\";\nimport { Emitter, } from \"@socket.io/component-emitter\";\nexport class Manager extends Emitter {\n    constructor(uri, opts) {\n        var _a;\n        super();\n        this.nsps = {};\n        this.subs = [];\n        if (uri && \"object\" === typeof uri) {\n            opts = uri;\n            uri = undefined;\n        }\n        opts = opts || {};\n        opts.path = opts.path || \"/socket.io\";\n        this.opts = opts;\n        installTimerFunctions(this, opts);\n        this.reconnection(opts.reconnection !== false);\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n        this.randomizationFactor((_a = opts.randomizationFactor) !== null && _a !== void 0 ? _a : 0.5);\n        this.backoff = new Backoff({\n            min: this.reconnectionDelay(),\n            max: this.reconnectionDelayMax(),\n            jitter: this.randomizationFactor(),\n        });\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n        this._readyState = \"closed\";\n        this.uri = uri;\n        const _parser = opts.parser || parser;\n        this.encoder = new _parser.Encoder();\n        this.decoder = new _parser.Decoder();\n        this._autoConnect = opts.autoConnect !== false;\n        if (this._autoConnect)\n            this.open();\n    }\n    reconnection(v) {\n        if (!arguments.length)\n            return this._reconnection;\n        this._reconnection = !!v;\n        return this;\n    }\n    reconnectionAttempts(v) {\n        if (v === undefined)\n            return this._reconnectionAttempts;\n        this._reconnectionAttempts = v;\n        return this;\n    }\n    reconnectionDelay(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelay;\n        this._reconnectionDelay = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n        return this;\n    }\n    randomizationFactor(v) {\n        var _a;\n        if (v === undefined)\n            return this._randomizationFactor;\n        this._randomizationFactor = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n        return this;\n    }\n    reconnectionDelayMax(v) {\n        var _a;\n        if (v === undefined)\n            return this._reconnectionDelayMax;\n        this._reconnectionDelayMax = v;\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n        return this;\n    }\n    timeout(v) {\n        if (!arguments.length)\n            return this._timeout;\n        this._timeout = v;\n        return this;\n    }\n    /**\n     * Starts trying to reconnect if reconnection is enabled and we have not\n     * started reconnecting yet\n     *\n     * @private\n     */\n    maybeReconnectOnOpen() {\n        // Only try to reconnect if it's the first time we're connecting\n        if (!this._reconnecting &&\n            this._reconnection &&\n            this.backoff.attempts === 0) {\n            // keeps reconnection from firing twice for the same reconnection loop\n            this.reconnect();\n        }\n    }\n    /**\n     * Sets the current transport `socket`.\n     *\n     * @param {Function} fn - optional, callback\n     * @return self\n     * @public\n     */\n    open(fn) {\n        if (~this._readyState.indexOf(\"open\"))\n            return this;\n        this.engine = new Engine(this.uri, this.opts);\n        const socket = this.engine;\n        const self = this;\n        this._readyState = \"opening\";\n        this.skipReconnect = false;\n        // emit `open`\n        const openSubDestroy = on(socket, \"open\", function () {\n            self.onopen();\n            fn && fn();\n        });\n        // emit `error`\n        const errorSub = on(socket, \"error\", (err) => {\n            self.cleanup();\n            self._readyState = \"closed\";\n            this.emitReserved(\"error\", err);\n            if (fn) {\n                fn(err);\n            }\n            else {\n                // Only do this if there is no fn to handle the error\n                self.maybeReconnectOnOpen();\n            }\n        });\n        if (false !== this._timeout) {\n            const timeout = this._timeout;\n            if (timeout === 0) {\n                openSubDestroy(); // prevents a race condition with the 'open' event\n            }\n            // set timer\n            const timer = this.setTimeoutFn(() => {\n                openSubDestroy();\n                socket.close();\n                // @ts-ignore\n                socket.emit(\"error\", new Error(\"timeout\"));\n            }, timeout);\n            // @ts-ignore\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n        this.subs.push(openSubDestroy);\n        this.subs.push(errorSub);\n        return this;\n    }\n    /**\n     * Alias for open()\n     *\n     * @return self\n     * @public\n     */\n    connect(fn) {\n        return this.open(fn);\n    }\n    /**\n     * Called upon transport open.\n     *\n     * @private\n     */\n    onopen() {\n        // clear old subs\n        this.cleanup();\n        // mark as open\n        this._readyState = \"open\";\n        this.emitReserved(\"open\");\n        // add new subs\n        const socket = this.engine;\n        this.subs.push(on(socket, \"ping\", this.onping.bind(this)), on(socket, \"data\", this.ondata.bind(this)), on(socket, \"error\", this.onerror.bind(this)), on(socket, \"close\", this.onclose.bind(this)), on(this.decoder, \"decoded\", this.ondecoded.bind(this)));\n    }\n    /**\n     * Called upon a ping.\n     *\n     * @private\n     */\n    onping() {\n        this.emitReserved(\"ping\");\n    }\n    /**\n     * Called with data.\n     *\n     * @private\n     */\n    ondata(data) {\n        this.decoder.add(data);\n    }\n    /**\n     * Called when parser fully decodes a packet.\n     *\n     * @private\n     */\n    ondecoded(packet) {\n        this.emitReserved(\"packet\", packet);\n    }\n    /**\n     * Called upon socket error.\n     *\n     * @private\n     */\n    onerror(err) {\n        this.emitReserved(\"error\", err);\n    }\n    /**\n     * Creates a new socket for the given `nsp`.\n     *\n     * @return {Socket}\n     * @public\n     */\n    socket(nsp, opts) {\n        let socket = this.nsps[nsp];\n        if (!socket) {\n            socket = new Socket(this, nsp, opts);\n            this.nsps[nsp] = socket;\n        }\n        return socket;\n    }\n    /**\n     * Called upon a socket close.\n     *\n     * @param socket\n     * @private\n     */\n    _destroy(socket) {\n        const nsps = Object.keys(this.nsps);\n        for (const nsp of nsps) {\n            const socket = this.nsps[nsp];\n            if (socket.active) {\n                return;\n            }\n        }\n        this._close();\n    }\n    /**\n     * Writes a packet.\n     *\n     * @param packet\n     * @private\n     */\n    _packet(packet) {\n        const encodedPackets = this.encoder.encode(packet);\n        for (let i = 0; i < encodedPackets.length; i++) {\n            this.engine.write(encodedPackets[i], packet.options);\n        }\n    }\n    /**\n     * Clean up transport subscriptions and packet buffer.\n     *\n     * @private\n     */\n    cleanup() {\n        this.subs.forEach((subDestroy) => subDestroy());\n        this.subs.length = 0;\n        this.decoder.destroy();\n    }\n    /**\n     * Close the current socket.\n     *\n     * @private\n     */\n    _close() {\n        this.skipReconnect = true;\n        this._reconnecting = false;\n        this.onclose(\"forced close\");\n        if (this.engine)\n            this.engine.close();\n    }\n    /**\n     * Alias for close()\n     *\n     * @private\n     */\n    disconnect() {\n        return this._close();\n    }\n    /**\n     * Called upon engine close.\n     *\n     * @private\n     */\n    onclose(reason) {\n        this.cleanup();\n        this.backoff.reset();\n        this._readyState = \"closed\";\n        this.emitReserved(\"close\", reason);\n        if (this._reconnection && !this.skipReconnect) {\n            this.reconnect();\n        }\n    }\n    /**\n     * Attempt a reconnection.\n     *\n     * @private\n     */\n    reconnect() {\n        if (this._reconnecting || this.skipReconnect)\n            return this;\n        const self = this;\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\n            this.backoff.reset();\n            this.emitReserved(\"reconnect_failed\");\n            this._reconnecting = false;\n        }\n        else {\n            const delay = this.backoff.duration();\n            this._reconnecting = true;\n            const timer = this.setTimeoutFn(() => {\n                if (self.skipReconnect)\n                    return;\n                this.emitReserved(\"reconnect_attempt\", self.backoff.attempts);\n                // check again for the case socket closed in above events\n                if (self.skipReconnect)\n                    return;\n                self.open((err) => {\n                    if (err) {\n                        self._reconnecting = false;\n                        self.reconnect();\n                        this.emitReserved(\"reconnect_error\", err);\n                    }\n                    else {\n                        self.onreconnect();\n                    }\n                });\n            }, delay);\n            // @ts-ignore\n            if (this.opts.autoUnref) {\n                timer.unref();\n            }\n            this.subs.push(function subDestroy() {\n                clearTimeout(timer);\n            });\n        }\n    }\n    /**\n     * Called upon successful reconnect.\n     *\n     * @private\n     */\n    onreconnect() {\n        const attempt = this.backoff.attempts;\n        this._reconnecting = false;\n        this.backoff.reset();\n        this.emitReserved(\"reconnect\", attempt);\n    }\n}\n","import { url } from \"./url.js\";\nimport { Manager } from \"./manager.js\";\nimport { Socket } from \"./socket.js\";\n/**\n * Managers cache.\n */\nconst cache = {};\nfunction lookup(uri, opts) {\n    if (typeof uri === \"object\") {\n        opts = uri;\n        uri = undefined;\n    }\n    opts = opts || {};\n    const parsed = url(uri, opts.path || \"/socket.io\");\n    const source = parsed.source;\n    const id = parsed.id;\n    const path = parsed.path;\n    const sameNamespace = cache[id] && path in cache[id][\"nsps\"];\n    const newConnection = opts.forceNew ||\n        opts[\"force new connection\"] ||\n        false === opts.multiplex ||\n        sameNamespace;\n    let io;\n    if (newConnection) {\n        io = new Manager(source, opts);\n    }\n    else {\n        if (!cache[id]) {\n            cache[id] = new Manager(source, opts);\n        }\n        io = cache[id];\n    }\n    // @ts-ignore\n    if (parsed.query && !opts.query) {\n        // @ts-ignore\n        opts.query = parsed.queryKey;\n    }\n    return io.socket(parsed.path, opts);\n}\n// so that \"lookup\" can be used both as a function (e.g. `io(...)`) and as a\n// namespace (e.g. `io.connect(...)`), for backward compatibility\nObject.assign(lookup, {\n    Manager,\n    Socket,\n    io: lookup,\n    connect: lookup,\n});\n/**\n * Protocol version.\n *\n * @public\n */\nexport { protocol } from \"./parser.js\";\n/**\n * Expose constructors for standalone build.\n *\n * @public\n */\nexport { Manager, Socket, lookup as io, lookup as connect, lookup as default, };\n","import parseuri from \"parseuri\";\n/**\n * URL parser.\n *\n * @param uri - url\n * @param path - the request path of the connection\n * @param loc - An object meant to mimic window.location.\n *        Defaults to window.location.\n * @public\n */\nexport function url(uri, path = \"\", loc) {\n    let obj = uri;\n    // default to window.location\n    loc = loc || (typeof location !== \"undefined\" && location);\n    if (null == uri)\n        uri = loc.protocol + \"//\" + loc.host;\n    // relative path support\n    if (typeof uri === \"string\") {\n        if (\"/\" === uri.charAt(0)) {\n            if (\"/\" === uri.charAt(1)) {\n                uri = loc.protocol + uri;\n            }\n            else {\n                uri = loc.host + uri;\n            }\n        }\n        if (!/^(https?|wss?):\\/\\//.test(uri)) {\n            if (\"undefined\" !== typeof loc) {\n                uri = loc.protocol + \"//\" + uri;\n            }\n            else {\n                uri = \"https://\" + uri;\n            }\n        }\n        // parse\n        obj = parseuri(uri);\n    }\n    // make sure we treat `localhost:80` and `localhost` equally\n    if (!obj.port) {\n        if (/^(http|ws)$/.test(obj.protocol)) {\n            obj.port = \"80\";\n        }\n        else if (/^(http|ws)s$/.test(obj.protocol)) {\n            obj.port = \"443\";\n        }\n    }\n    obj.path = obj.path || \"/\";\n    const ipv6 = obj.host.indexOf(\":\") !== -1;\n    const host = ipv6 ? \"[\" + obj.host + \"]\" : obj.host;\n    // define unique id\n    obj.id = obj.protocol + \"://\" + host + \":\" + obj.port + path;\n    // define href\n    obj.href =\n        obj.protocol +\n            \"://\" +\n            host +\n            (loc && loc.port === obj.port ? \"\" : \":\" + obj.port);\n    return obj;\n}\n"],"names":["re","parts","parseuri","str","src","b","indexOf","e","substring","replace","length","query","data","m","exec","uri","i","source","host","authority","ipv6uri","pathNames","obj","path","regx","names","split","substr","splice","queryKey","$0","$1","$2","PACKET_TYPES","Object","create","PACKET_TYPES_REVERSE","keys","forEach","key","ERROR_PACKET","type","withNativeBlob","Blob","prototype","toString","call","withNativeArrayBuffer","ArrayBuffer","encodePacket","supportsBinary","callback","encodeBlobAsBase64","isView","buffer","fileReader","FileReader","onload","content","result","readAsDataURL","chars","lookup","Uint8Array","charCodeAt","decodeBase64Packet","binaryType","decoded","base64","encoded1","encoded2","encoded3","encoded4","bufferLength","len","p","arraybuffer","bytes","decode","mapBinary","Emitter","mixin","on","addEventListener","event","fn","_callbacks","this","push","once","off","apply","arguments","removeListener","removeAllListeners","removeEventListener","cb","callbacks","emit","args","Array","slice","emitReserved","listeners","hasListeners","self","window","Function","NATIVE_SET_TIMEOUT","setTimeout","NATIVE_CLEAR_TIMEOUT","clearTimeout","installTimerFunctions","opts","useNativeTimers","setTimeoutFn","bind","globalThis","clearTimeoutFn","TransportError","reason","description","context","Error","Transport","writable","readyState","socket","doOpen","doClose","onClose","packets","write","packet","encodedPacket","charAt","decodePacket","onPacket","details","qs","qry","pairs","l","pair","decodeURIComponent","prev","alphabet","map","seed","encode","num","encoded","Math","floor","nextTick","Promise","resolve","then","WebSocket","MozWebSocket","isReactNative","navigator","product","toLowerCase","WS","forceBase64","check","protocols","attr","reduce","acc","k","hasOwnProperty","pick","extraHeaders","headers","ws","err","addEventListeners","onopen","_this2","autoUnref","_socket","unref","onOpen","onclose","closeEvent","onmessage","ev","onData","onerror","onError","lastPacket","_this3","send","close","now","schema","secure","port","Number","timestampRequests","timestampParam","Date","b64","encodedQuery","encodeURIComponent","hostname","name","transports","websocket","parse","Socket","protocol","location","_this","writeBuffer","prevBufferLen","_extends","agent","withCredentials","upgrade","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","closeOnBeforeunload","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","transport","offlineEventListener","open","o","clone","EIO","sid","priorWebsocketSuccess","createTransport","shift","setTransport","onDrain","failed","onTransportOpen","msg","_this4","upgrading","pause","cleanup","flush","freezeTransport","error","onTransportClose","onupgrade","to","probe","onHandshake","JSON","resetPingTimeout","sendPacket","code","filterUpgrades","maxPayload","_this5","getWritablePackets","payloadSize","c","utf8Length","ceil","byteLength","size","options","undefined","compress","_this6","cleanupAndClose","waitForUpgrade","filteredUpgrades","j","PacketType","Encoder","encodeAsString","BINARY_EVENT","BINARY_ACK","attachments","nsp","stringify","Decoder","decodeString","start","buf","next","payload","tryParse","isPayloadValid","CONNECT","_typeof","DISCONNECT","CONNECT_ERROR","EVENT","isArray","ACK","RESERVED_EVENTS","freeze","connect","connect_error","disconnect","disconnecting","newListener","io","connected","disconnected","receiveBuffer","sendBuffer","ids","acks","flags","auth","_autoConnect","subs","onpacket","subEvents","_readyState","unshift","ack","pop","_registerAckCallback","isTransportWritable","engine","discardPacket","timeout","timer","_packet","onconnect","onevent","onack","ondisconnect","destroy","message","emitEvent","_anyListeners","sent","emitBuffered","subDestroy","listener","backo2","Backoff","ms","min","max","factor","jitter","attempts","duration","pow","rand","random","deviation","reset","setMin","setMax","setJitter","Manager","_a","nsps","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","_parser","parser","encoder","decoder","autoConnect","v","_reconnection","_reconnectionAttempts","_reconnectionDelay","_randomizationFactor","_reconnectionDelayMax","_timeout","_reconnecting","reconnect","Engine","skipReconnect","openSubDestroy","errorSub","maybeReconnectOnOpen","onping","ondata","ondecoded","add","active","_close","encodedPackets","delay","onreconnect","attempt","cache","parsed","loc","test","href","url","sameNamespace","forceNew","multiplex"],"mappings":"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"}